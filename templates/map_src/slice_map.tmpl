{{- /*
This template outputs a slice-map, which is a golang map that is sortable and iterable in a predictable way.
By default, the order is the same as the order items are inserted, but you can sort by keys, or possibly by
values as well.

This template expects to be driven by a structure or map with the following keys. The github.com/goradd/gengen app lets
you easily create a json file that can be used to provide these values.

Values are:
package: the package name
KeyType: the CamelCase type of the key. This name will be used in function titles. Leave blank if a string type, since
         that is the default.
ValType: the CamelCase type of the value. This name will be used in function titles. Leave blank if an interface{},
         since that is the default.
keytype: the go type as used as an actual type of key variables.
valtype: the go type as used as an actual type of value variables.
Safe: put the word "Safe" here if you want a map synchronized with sync.Lock methods

valueIsCopier: If true, the value implements a Copy function which returns a value type. Otherwise, a golang = will
               be used to make a copy.
keyIsCopier: If true, the key implements a Copy function which returns a value type. Otherwise, a golang = will
               be used to make a copy.

For the following boolean values, you would set one, or none of them, true. They tell the template how to implement
the value sorter. If none of these are true, a value sorter will not be included. It WILL still be able to sort by
keys, since all maps require standard golang comparable keys.

valueIsComparer: The value satisfies its Comparer interface, meaning it implements Compare(v) int, which returns
                 -1, 0 or 1 depending whether the receiver is less than, equal or greater than the passed value.
                 If your value is an interface, the interface should include this function.
valueIsComparable: Set this to true if standard golang < will work for comparing values.

*/ -}}
package {{.package}}

import (
	"bytes"
	"encoding/gob"
	"encoding/json"
{{- if or .valueIsComparer .valueIsComparable}}
	"sort"{{end}}
	"strings"
{{- if .Safe}}
    "sync"{{end}}
{{if ne .valtype "string"}}
	"fmt"
{{end}}
)

// A {{.Safe}}{{.KeyType}}{{.ValType}}SliceMap combines a map with a slice so that you can range over a
// map in a predictable order. By default, the order will be the same order that items were inserted,
// i.e. a FIFO list. This is similar to how PHP arrays work.
// {{.Safe}}{{.KeyType}}{{.ValType}}SliceMap implements the sort interface so you can change the order
// before ranging over the values if desired.
// It is {{if not .Safe}}NOT{{end}} safe for concurrent use.
// The zero of this is usable immediately.
// The {{.Safe}}{{.KeyType}}{{.ValType}}SliceMap satisfies the {{.KeyType}}{{.ValType}}MapI interface.
type {{.Safe}}{{.KeyType}}{{.ValType}}SliceMap struct {
{{- if .Safe}}
    sync.RWMutex{{end}}
	items map[{{.keytype}}]{{.valtype}}
	order []{{.keytype}}
}

// New{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap creates a new map that maps {{.keytype}}'s to {{.valtype}}'s.
func New{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap() *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap {
	return new ({{.Safe}}{{.KeyType}}{{.ValType}}SliceMap)
}

// New{{.Safe}}{{.KeyType}}{{.ValType}}SliceMapFrom creates a new {{.Safe}}{{.KeyType}}{{.ValType}}Map from a
// {{.KeyType}}{{.ValType}}MapI interface object
func New{{.Safe}}{{.KeyType}}{{.ValType}}SliceMapFrom(i {{.KeyType}}{{.ValType}}MapI) *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap {
	m := new ({{.Safe}}{{.KeyType}}{{.ValType}}SliceMap)
	m.Merge(i)
	return m
}

// New{{.Safe}}{{.KeyType}}{{.ValType}}SliceMapFromMap creates a new {{.Safe}}{{.KeyType}}{{.ValType}}SliceMap from a
// GO map[{{.keytype}}]{{.valtype}} object. Note that this will pass control of the given map to the
// new object. After you do this, DO NOT change the original map.
func New{{.Safe}}{{.KeyType}}{{.ValType}}SliceMapFromMap(i map[{{.keytype}}]{{.valtype}}) *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap {
	m := New{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap()
	m.items = i
	m.order = make([]{{.keytype}}, len(m.items), len(m.items))
	j := 0
	for k := range m.items {
	    m.order[j] = k
	    j++
	}
	return m
}



// SetChanged sets the value, but also appends the value to the end of the list.
// It returns true if something in the map changed. If the key
// was already in the map, the order will not change, but the value will be replaced. If you want the
// order to change, you must Delete then call SetChanged.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) SetChanged(key {{.keytype}}, val {{.valtype}}) (changed bool) {
	var ok bool
	var oldVal {{.valtype}}

	if o == nil {
	    panic("You must initialize the map before using it.")
	}

{{- if .Safe}}
    o.Lock(){{end}}

	if o.items == nil {
	    o.items = make(map[{{.keytype}}]{{.valtype}})
	}

	if oldVal, ok = o.items[key]; !ok || oldVal != val {
		if !ok {
			o.order = append(o.order, key)
		}
		o.items[key] = val
		changed = true
	}

{{- if .Safe}}
    o.Unlock(){{end}}

	return
}

// Set sets the given key to the given value.
// If the key already exists, the range order will not change.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Set(key {{.keytype}}, val {{.valtype}}) {
	o.SetChanged(key, val)
}

// SetAt sets the given key to the given value, but also inserts it at the index specified.  If the index is bigger than
// the length, or -1, it is the same as Set, in that it puts it at the end. Negative indexes are backwards from the
// end, if smaller than the negative length, just inserts at the beginning.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) SetAt(index int, key {{.keytype}}, val {{.valtype}})  {
    if o == nil {
        panic("You must initialize the map before using it.")
    }

	if index == -1 || index >= len(o.order) {
		o.Set(key, val)
		return
	}

	var ok bool
	var emptyKey {{.keytype}}

{{- if .Safe}}
    o.Lock(){{end}}

	if _, ok = o.items[key]; !ok {
		if index < -len(o.items) {
			index = 0
		}
		if index < 0 {
			index = len(o.items) + index + 1
		}

		o.order = append(o.order, emptyKey)
		copy(o.order[index+1:], o.order[index:])
		o.order[index] = key
	}
	o.items[key] = val
{{- if .Safe}}
    o.Unlock(){{end}}
    return
}

// Delete removes the item with the given key.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Delete(key {{.keytype}}) {
    if o == nil {
        return
    }

{{- if .Safe}}
    o.Lock(){{end}}
	for i, v := range o.order {
		if v == key {
			o.order = append(o.order[:i], o.order[i+1:]...)
			break
		}
	}
	delete(o.items, key)
{{- if .Safe}}
    o.Unlock(){{end}}
}

// Get returns the value based on its key. If the key does not exist, an empty value is returned.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Get(key {{.keytype}}) (val {{.valtype}}) {
    val,_ = o.Load(key)
    return
}

// Load returns the value based on its key, and a boolean indicating whether it exists in the map.
// This is the same interface as sync.Map.Load()
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Load(key {{.keytype}}) (val {{.valtype}}, ok bool) {
    if o == nil {
        return
    }
{{- if .Safe}}
    o.RLock(){{end}}
    if o.items != nil {
    	val, ok = o.items[key]
    }
{{- if .Safe}}
    o.RUnlock(){{end}}
	return
}

{{if eq .valtype "interface{}"}}
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) LoadString(key {{.keytype}}) (val string, ok bool) {
    var v interface{}
    v,ok = o.Load(key)
    if ok {
        val,ok = v.(string)
    }
    return
}

func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) LoadInt(key {{.keytype}}) (val int, ok bool) {
    var v interface{}
    v,ok = o.Load(key)
    if ok {
        val,ok = v.(int)
    }
    return
}

func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) LoadBool(key {{.keytype}}) (val bool, ok bool) {
    var v interface{}
    v,ok = o.Load(key)
    if ok {
        val,ok = v.(bool)
    }
    return
}

func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) LoadFloat64(key {{.keytype}}) (val float64, ok bool) {
    var v interface{}
    v,ok = o.Load(key)
    if ok {
        val,ok = v.(float64)
    }
    return
}
{{end}}

// Has returns true if the given key exists in the map.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Has(key {{.keytype}}) (ok bool) {
    if o == nil {
        return false
    }
{{- if .Safe}}
    o.RLock(){{end}}
    if o.items != nil {
	    _, ok = o.items[key]
    }
{{- if .Safe}}
    o.RUnlock(){{end}}
	return
}

// GetAt returns the value based on its position. If the position is out of bounds, an empty value is returned.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) GetAt(position int) (val {{.valtype}}) {
    if o == nil {
        return
    }
{{- if .Safe}}
    o.RLock(){{end}}
	if position < len(o.order) && position >= 0 {
		val, _ = o.items[o.order[position]]
	}
{{- if .Safe}}
    o.RUnlock(){{end}}
	return
}

// GetKeyAt returns the key based on its position. If the position is out of bounds, an empty value is returned.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) GetKeyAt(position int) (key {{.keytype}}) {
    if o == nil {
        return
    }
{{- if .Safe}}
    o.RLock(){{end}}
	if position < len(o.order) && position >= 0 {
		key = o.order[position]
	}
{{- if .Safe}}
    o.RUnlock(){{end}}
	return
}

// Values returns a slice of the values in the order they were added or sorted.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Values() (vals []{{.valtype}}) {
    if o == nil {
        return
    }

{{- if .Safe}}
    o.RLock(){{end}}

    if o.items != nil {
  	    vals = make([]{{.valtype}}, len(o.order))
        for i, v := range o.order {
            vals[i] = o.items[v]
        }
    }

{{- if .Safe}}
    o.RUnlock(){{end}}

	return
}

// Keys returns the keys of the map, in the order they were added or sorted
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Keys() (keys []{{.keytype}}) {
    if o == nil {
        return
    }

{{- if .Safe}}
    o.RLock(){{end}}

    if len(o.order) != 0 {
 	    keys = make([]{{.keytype}}, len(o.order))
        for i, v := range o.order {
            keys[i] = v
        }
    }
{{- if .Safe}}
    o.RUnlock(){{end}}

	return
}

// Len returns the number of items in the map
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Len() int {
    if o == nil {
        return 0
    }

{{- if .Safe}}
    o.RLock(){{end}}
    l := len(o.order)
{{- if .Safe}}
    o.RUnlock(){{end}}
	return l
}

// Less is part of the interface that allows the map to be sorted by keys.
// It returns true if the value at position i should be sorted before the value at position j.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Less(i, j int) bool {
{{ if .Safe}}
	o.RLock()
	defer o.RUnlock(){{end}}
{{if .keyIsComparer}}
    return o.order[i].Compare(o.order[j]) < 0
{{else}}
	return o.order[i] < o.order[j]
{{end}}
}

// Swap is part of the interface that allows the slice to be sorted. It swaps the positions
// of the items and position i and j.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Swap(i, j int) {
{{- if .Safe}}
	o.Lock(){{end}}
	o.order[i], o.order[j] = o.order[j], o.order[i]
{{- if .Safe}}
    o.Unlock(){{end}}
}

{{if or .valueIsComparer .valueIsComparable}}

// sort{{.Safe}}{{.KeyType}}{{.ValType}}ByValues is a helper structure so the map can be sorted by value
type sort{{.Safe}}{{.KeyType}}{{.ValType}}ByValues struct {
	// This embedded interface permits Reverse to use the methods of
	// another interface implementation.
	sort.Interface
}

// Order{{.Safe}}{{.KeyType}}{{.ValType}}SliceMapByValues is a helper function to allow
// {{.Safe}}{{.KeyType}}{{.ValType}}SliceMaps to be sorted by values.
// To sort the map by values, call:
//   sort.Sort(Order{{.Safe}}{{.KeyType}}{{.ValType}}SliceMapByValues(m))
func Order{{.Safe}}{{.KeyType}}{{.ValType}}SliceMapByValues(o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) sort.Interface {
	return &sort{{.Safe}}{{.KeyType}}{{.ValType}}ByValues{o}
}

// A helper function to allow {{.Safe}}{{.KeyType}}{{.ValType}}SliceMaps to be sorted by values
func (r sort{{.Safe}}{{.KeyType}}{{.ValType}}ByValues) Less(i, j int) bool {
	var o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap = r.Interface.(*{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap)
{{- if .Safe}}
	o.RLock()
	defer o.RUnlock(){{end}}

{{if .valueIsComparer}}
    return o.items[o.order[i]].Compare(o.items[o.order[j]]) < 0
{{else if .valueIsComparable}}
	return o.items[o.order[i]] < o.items[o.order[j]]
{{end}}
}

{{end}} {{/* if or .valueIsComparer .valueIsComparable */}}

// Copy will make a copy of the map and a copy of the underlying data.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Copy() *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap {
	cp := New{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap()

	o.Range(func(key {{.keytype}}, value {{.valtype}}) bool {
{{- if .valueIsCopier}}
        value = value.Copy(){{end}}

{{- if .keyIsCopier}}
        key = key.Copy(){{end}}

		cp.Set(key, value)
		return true
	})
	return cp
}

// MarshalBinary implements the BinaryMarshaler interface to convert the map to a byte stream.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) MarshalBinary() (data []byte, err error) {
	buf := new(bytes.Buffer)
	encoder := gob.NewEncoder(buf)

{{- if .Safe}}
	o.RLock()
	defer o.RUnlock(){{end}}

	err = encoder.Encode(o.items)
	if err == nil {
		err = encoder.Encode(o.order)
	}
	data = buf.Bytes()
	return
}

// UnmarshalBinary implements the BinaryUnmarshaler interface to convert a byte stream to a
// {{.Safe}}{{.KeyType}}{{.ValType}}SliceMap
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) UnmarshalBinary(data []byte) (err error) {
    var items map[{{.keytype}}]{{.valtype}}
	var order []{{.keytype}}

	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)
	if err = dec.Decode(&items); err == nil {
		err = dec.Decode(&order)
	}

	if err == nil {
 {{- if .Safe}}
        o.Lock(){{end}}
        o.items = items
        o.order = order
 {{- if .Safe}}
        o.Unlock(){{end}}
	}
	return err
}

// MarshalJSON implements the json.Marshaler interface to convert the map into a JSON object.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) MarshalJSON() (data []byte, err error) {
	// Json objects are unordered
{{- if .Safe}}
    o.RLock()
    defer o.RUnlock(){{end}}
	data, err = json.Marshal(o.items)
	return
}

// UnmarshalJSON implements the json.Unmarshaler interface to convert a json object to a {{.Safe}}{{.KeyType}}{{.ValType}}Map.
// The JSON must start with an object.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) UnmarshalJSON(data []byte) (err error) {
    var items map[{{.keytype}}]{{.valtype}}

	if err = json.Unmarshal(data, &items); err == nil {
 {{- if .Safe}}
        o.Lock(){{end}}
        o.items = items
        // Create a default order, since these are inherently unordered
        o.order = make([]string, len(o.items))
        i := 0
        for k := range o.items {
            o.order[i] = k
            i++
        }
 {{- if .Safe}}
        o.Unlock(){{end}}
	}
	return
}


// Merge the given map into the current one
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Merge(i {{.KeyType}}{{.ValType}}MapI) {
	if i != nil {
		i.Range(func(k {{.keytype}}, v {{.valtype}}) bool {
			o.Set(k, v)
			return true
		})
	}
}

// Range will call the given function with every key and value in the order
// they were placed in the map, or in if you sorted the map, in your custom order.
// If f returns false, it stops the iteration. This pattern is taken from sync.Map.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Range(f func(key {{.keytype}}, value {{.valtype}}) bool) {
	if o == nil {
		return
	}

{{- if .Safe}}
    o.Lock()
    defer o.Unlock(){{end}}
	if  o.items != nil {
        for _, k := range o.order {
            if !f(k, o.items[k]) {
                break
            }
        }
    }
}

// Equals returns true if the map equals the given map, paying attention only to the content of the
// map and not the order.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Equals(i {{.KeyType}}{{.ValType}}MapI) bool {
	l := i.Len()
	if l == 0 {
		return o == nil
	}
	if l != o.Len() {
		return false
	}
	var ret = true

	o.Range(func(k {{.keytype}}, v {{.valtype}}) bool {
		if !i.Has(k) || v != i.Get(k) {
			ret = false
			return false
		}
		return true
	})
	return ret
}

func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Clear() {
    if o == nil {return}
{{- if .Safe}}
    o.Lock(){{end}}
	o.items = nil
	o.order = nil
{{- if .Safe}}
    o.Unlock(){{end}}

}

func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) IsNil() bool {
	return o == nil
}

func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) String() string {
	var s string

	s = "{"
	o.Range(func(k {{.keytype}}, v {{.valtype}}) bool {
		s += `"` + k + `":"` +
{{if eq .valtype "string" -}}
        v
{{- else -}}
        fmt.Sprintf("%v", v)
{{- end -}}
		 + `",`
		return true
	})
	s = strings.TrimRight(s, ",")
	s += "}"
	return s
}

{{if eq .valtype "string"}}
// Join is just like strings.Join
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}SliceMap) Join(glue string) string {
	return strings.Join(o.Values(), glue)
}
{{end}}

func init() {
	gob.Register(new ({{.Safe}}{{.KeyType}}{{.ValType}}SliceMap))
}