package {{.package}}

import (
	"bytes"
	"encoding/gob"
	"encoding/json"
{{- if .Safe}}
	"sync"
{{end}}
{{if .imports}}
    {{.imports}}
{{end}}
)

// {{.Safe}}{{.KeyType}}{{.ValType}}Map maps a {{.keytype}} to a {{.valtype}}.
// This version is {{if not .Safe -}} not {{- end}} safe for concurrent use.
// A zero value is ready for use, but you may not copy it after first using it.
type {{.Safe}}{{.KeyType}}{{.ValType}}Map struct {
{{- if .Safe}}
	sync.RWMutex{{end}}
    items map[{{.keytype}}]{{.valtype}}
}

// New{{.Safe}}{{.KeyType}}{{.ValType}}Map creates a new map that maps {{.keytype}}'s to {{.valtype}}'s.
func New{{.Safe}}{{.KeyType}}{{.ValType}}Map() *{{.Safe}}{{.KeyType}}{{.ValType}}Map {
	return new({{.Safe}}{{.KeyType}}{{.ValType}}Map)
}

// New{{.Safe}}{{.KeyType}}{{.ValType}}MapFrom creates a new {{.Safe}}{{.KeyType}}{{.ValType}}Map from a
// {{.KeyType}}{{.ValType}}MapI interface object
func New{{.Safe}}{{.KeyType}}{{.ValType}}MapFrom(i {{.KeyType}}{{.ValType}}MapI) *{{.Safe}}{{.KeyType}}{{.ValType}}Map {
	m := New{{.Safe}}{{.KeyType}}{{.ValType}}Map()
	m.Merge(i)
	return m
}

// Clear resets the map to an empty map
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) Clear() {
    if o == nil {
		return
	}
{{- if .Safe}}
 	o.Lock(){{end}}
	o.items = nil
{{- if .Safe}}
    o.Unlock(){{end}}
}

// SetChanged sets the key to the value and returns a boolean indicating whether doing this caused
// the map to change. It will return true if the key did not first exist, or if the value associated
// with the key was different than the new value.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) SetChanged(key {{.keytype}}, val {{.valtype}}) (changed bool) {
	var ok bool
	var oldVal {{.valtype}}

	if o == nil {
		panic("The map must be created before being used.")
	}
{{- if .Safe}}
 	o.Lock(){{end}}
	if o.items == nil {
	    o.items = make(map[{{.keytype}}]{{.valtype}})
	}

	if oldVal, ok = o.items[key]; !ok || oldVal != val {
		o.items[key] = val
		changed = true
	}
{{- if .Safe}}
    o.Unlock(){{end}}
	return
}

// Set sets the key to the given value
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) Set(key {{.keytype}}, val {{.valtype}}) {
	if o == nil {
		panic("The map must be initialized before being used.")
	}
{{- if .Safe}}
 	o.Lock(){{end}}
    if o.items == nil {
        o.items = make(map[{{.keytype}}]{{.valtype}})
    }

	o.items[key] = val
{{- if .Safe}}
    o.Unlock(){{end}}
}

// Get returns the value based on its key. If it does not exist, an empty {{.keytype}} will be returned.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) Get(key {{.keytype}}) (val {{.valtype}}) {
    val,_ = o.Load(key)
	return
}

// Load returns the value based on its key, and a boolean indicating whether it exists in the map.
// This is the same interface as sync.Map.Load()
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) Load(key {{.keytype}}) (val {{.valtype}}, ok bool) {
    if o == nil {
		return
	}
{{- if .Safe}}
    o.RLock(){{end}}
	if o.items != nil {
	    val,ok = o.items[key]
	}
{{- if .Safe}}
    o.RUnlock(){{end}}
	return
}

{{if eq .valtype "interface{}"}}
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) LoadString(key {{.keytype}}) (val string, ok bool) {
    var v interface{}
    v,ok = o.Load(key)
    if ok {
        val,ok = v.(string)
    }
    return
}

func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) LoadInt(key {{.keytype}}) (val int, ok bool) {
    var v interface{}
    v,ok = o.Load(key)
    if ok {
        val,ok = v.(int)
    }
    return
}

func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) LoadBool(key {{.keytype}}) (val bool, ok bool) {
    var v interface{}
    v,ok = o.Load(key)
    if ok {
        val,ok = v.(bool)
    }
    return
}

func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) LoadFloat64(key {{.keytype}}) (val float64, ok bool) {
    var v interface{}
    v,ok = o.Load(key)
    if ok {
        val,ok = v.(float64)
    }
    return
}
{{end}}


// Delete removes the key from the map. If the key does not exist, nothing happens.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) Delete(key {{.keytype}}) {
    if o == nil {
		return
	}
{{- if .Safe}}
 	o.Lock(){{end}}
 	if o.items != nil {
	    delete(o.items, key)
	}
{{- if .Safe}}
    o.Unlock(){{end}}
}


// Has returns true if the given key exists in the map.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) Has(key {{.keytype}}) (exists bool) {
    if o == nil {
		return
	}
{{- if .Safe}}
    o.RLock(){{end}}
    if o.items != nil {
 	    _, exists = o.items[key]
    }
{{- if .Safe}}
    o.RUnlock(){{end}}
	return
}

// Values returns a slice of the values. It will return a nil slice if the map is empty.
// Multiple calls to Values will result in the same list of values, but may be in a different order.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) Values() (vals []{{.valtype}}) {
    if o == nil {
        return
    }

{{- if .Safe}}
    o.RLock(){{end}}
    if len(o.items) > 0 {
        vals = make([]{{.valtype}}, len(o.items))

        var i int
        for _, v := range o.items {
            vals[i] = v
            i++
        }
    }
{{- if .Safe}}
    o.RUnlock(){{end}}

	return
}

// Keys returns a slice of the keys. It will return a nil slice if the map is empty.
// Multiple calls to Keys will result in the same list of keys, but may be in a different order.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) Keys() (keys []{{.keytype}}) {
    if o == nil {
        return nil
    }

{{- if .Safe}}
    o.RLock(){{end}}
    if len(o.items) > 0 {
        keys = make([]{{.keytype}}, len(o.items))

        var i int
        for k := range o.items {
            keys[i] = k
            i++
        }
    }
{{- if .Safe}}
    o.RUnlock(){{end}}
	return
}

// Len returns the number of items in the map
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) Len() (l int) {
    if o == nil {
		return
	}
{{- if .Safe}}
    o.RLock(){{end}}
    l = len(o.items)
{{- if .Safe}}
    o.RUnlock(){{end}}
	return
}

// Range will call the given function with every key and value in the map.
// If f returns false, it stops the iteration. This pattern is taken from sync.Map.
{{- if .Safe}}
// During this process, the map will be locked, so do not pass a function that will take significant amounts of time.{{end}}
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) Range(f func(key {{.keytype}}, value {{.valtype}}) bool) {
	if o == nil {
		return
	}
{{- if .Safe}}
	o.RLock()
	defer o.RUnlock(){{end}}

	for k, v := range o.items {
		if !f(k, v) {
			break
		}
	}
}

// Merge merges the given  map with the current one. The given one takes precedent on collisions.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) Merge(i {{.KeyType}}{{.ValType}}MapI) {
	if i == nil {
		return
	}

	if o == nil {
		panic("The map must be created before being used.")
	}

{{- if .Safe}}
	o.Lock()
	defer o.Unlock(){{end}}

	if o.items == nil {
	    o.items = make(map[{{.keytype}}]{{.valtype}}, i.Len())
	}
	i.Range(func(k {{.keytype}}, v {{.valtype}}) bool {
		o.items[k] = v
		return true
	})
}

// Equals returns true if all the keys in the given map exist in this map, and the values are the same
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) Equals(i {{.KeyType}}{{.ValType}}MapI) bool {
    len := o.Len()
	if i.Len() != len {
		return false
	} else if len == 0 { // both are zero
	    return true
	}
	var ret = true

{{- if .Safe}}
    o.RLock()
    defer o.RUnlock(){{end}}

	i.Range(func(k {{.keytype}}, v {{.valtype}}) bool {
		if v2,ok := o.items[k]; !ok || v2 != v {
			ret = false
			return false // stop iterating
		}
		return true
	})

	return ret
}

// Copy will make a copy of the map and a copy of the underlying data.
{{- if not .valueIsCopyable}}{{if .valueIsInterface}}
// If the values implement the {{.ValType}}Copier interface, the value's Copy function will be called to deep copy the items.{{end}}{{end}}
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) Copy() {{.KeyType}}{{.ValType}}MapI {
	cp := New{{.Safe}}{{.KeyType}}{{.ValType}}Map()

	o.Range(func(key {{.keytype}}, value {{.valtype}}) bool {
{{if .valueIsCopyable}}
        value = value.Copy()
{{else if .valueIsInterface}}
		if copier, ok := value.({{.ValType}}Copier); ok {
			value = copier.Copy()
		}
{{end}}

{{if .keyIsCopyable}}
        key = key.Copy()
{{else if .keyIsInterface}}
		if copier, ok := key.({{.KeyType}}Copier); ok {
			key = copier.Copy()
		}
{{end}}

		cp.Set(key, value)
		return true
	})
	return cp
}

// MarshalBinary implements the BinaryMarshaler interface to convert the map to a byte stream.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) MarshalBinary() ([]byte, error) {
	var b bytes.Buffer

 	enc := gob.NewEncoder(&b)
{{- if .Safe}}
    o.RLock()
    defer o.RUnlock(){{end}}
	err := enc.Encode(o.items)
	return b.Bytes(), err
}

// UnmarshalBinary implements the BinaryUnmarshaler interface to convert a byte stream to a
// {{.Safe}}{{.KeyType}}{{.ValType}}Map
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) UnmarshalBinary(data []byte) (err error) {
    var v map[{{.keytype}}]{{.valtype}}

	b := bytes.NewBuffer(data)
	dec := gob.NewDecoder(b)
	if err = dec.Decode(&v); err == nil {
 {{- if .Safe}}
        o.Lock(){{end}}
        o.items = v
 {{- if .Safe}}
        o.Unlock(){{end}}
	}
	return err
}

// MarshalJSON implements the json.Marshaler interface to convert the map into a JSON object.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) MarshalJSON() (out []byte, err error) {
{{- if .Safe}}
    o.RLock()
    defer o.RUnlock(){{end}}
    out,err = json.Marshal(o.items)
    return
}

// UnmarshalJSON implements the json.Unmarshaler interface to convert a json object to a {{.Safe}}{{.KeyType}}{{.ValType}}Map.
// The JSON must start with an object.
func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) UnmarshalJSON(in []byte) (err error) {
    var v map[{{.keytype}}]{{.valtype}}
    if err = json.Unmarshal(in, &v); err == nil {
 {{- if .Safe}}
        o.Lock(){{end}}
        o.items = v
 {{- if .Safe}}
        o.Unlock(){{end}}
    }
    return
}

func (o *{{.Safe}}{{.KeyType}}{{.ValType}}Map) IsNil() bool {
	return o == nil
}


func init() {
	gob.Register(new ({{.Safe}}{{.KeyType}}{{.ValType}}Map))
}
